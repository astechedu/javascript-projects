>> Notes <<

----------------------------------------------------

Keys
     session, flash-message, 
     controllers, models, views, routes, mongodb, schema, connection, 
     my mongodb crud, 

     pug template, for loop, ul li, var,

     git commands, 

----------------------------------------------------

----------------------------------------------------

- MongoDB On Local -

c:\>mongod --port 27017 --dbpath H:\Softwares\mongodb\data
c:\>mongos 
//Showing this
Connecting to: 
      mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.1

----------------------------------------------------
//Video
//https://youtu.be/eYVGoXPq2RA?t=1359

//Folder Structures (assets(css,js,img), server(controller,model,database,routes,services), views, server.js)
//https://youtu.be/W1Kttu53qTg?t=548

const express = require('express')
const mongoose = require('mongoose')
const dotenv = require('dotenv')
const bodyParser = require('body-parser')
//const morgan = require('morgan')
const path=require('path')

const url = 'mongodb://localhost/mydb'

const app = express()

dotenv.config({path:'config.env'})
const PORT=process.env.PORT || 8080

//mongoose.connect(url, {useNewUrlParser:true})
//const con = mongoose.connection

//con.on('open', () => {
//	console.log('connected...')
//})

//const productsRouter = require('../routes/products')
//app.use('/products', productsRouter)

//Log requests
//app.use(morgan('tiny'))
//Parse request to body-parser
app.use(bodyParser.urlencoded({extended:true}))


//Set view engine
app.set('view engine','pug');
app.set('views',path.resolve(__dirname, "views"));
//app.set('views',"./views");       //or

//Assets
//app.use(express.static(path.join(__dirname, 'public'));

/*
app.get('/', (req, res) => {  
 
   res.sendFile('index.html', {
     root: 'views'
   });
   
   //res.render('index');
});
*/

app.get('/', (req, res) => {  
 
   res.render('index', {title: "Ecommerce"});
});

app.get('/home', (req, res) => {
   res.sendFile('home.html', {
     root: 'views'
   });
});

app.listen(PORT, () => {
	console.log('server started Port: ' + PORT)
})


//Search Queries
//https://betterstack.com/community/guides/scaling-nodejs/build-nodejs-application-express-pug/

/*
app.get('/search', (req, res) => {
  const searchQuery = req.query.q;
  if (!searchQuery) {
    res.redirect(302, '/');
    return;
  }

  console.log(searchQuery);
  res.status(200).end();
});

*/

----------------------------------------------------

--> PUG Template With Express <--

https://betterstack.com/community/guides/scaling-nodejs/build-nodejs-application-express-pug/


mkdir hacker-news
cd hacker-news
npm init -y
npm install express
----------------------------------------------------
nano server.js
----------------------------------------------------
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello from Node.js server');
});

const server = app.listen(process.env.PORT || 3000, () => {
  console.log(`Hacker news server started on port: ${server.address().port}`);
});

----------------------------------------------------
node server.js
curl http://localhost:3000
npm install pm2 --save-dev
nano package.json

----------------------------------------------------
"scripts": {
  "dev": "npx pm2-dev server.js",
  "start": "npx pm2 start server.js"
}
----------------------------------------------------
npm run dev
npm install pug
----------------------------------------------------
const express = require('express');

const app = express();

app.set('view engine', 'pug');
. . .
----------------------------------------------------
mkdir views
nano views/default.pug

----------------------------------------------------
doctype html
html
    head
      meta(charset='UTF-8')
      meta(name='viewport' content='width=device-width, initial-scale=1.0')
      meta(http-equiv='X-UA-Compatible' content='ie=edge')
      title= title
      link(rel='stylesheet' type="text/css" href='/css/style.css')
    body
      block content
----------------------------------------------------

nano views/home.pug
----------------------------------------------------
extends default

block content
  .home-search
    img(src="/images/hn.png" width="180" height="180")
    form(action='/search' method='GET')
      input.home-input(autofocus='' placeholder='Search Hacker News' type='search' name='q')


app.get('/', (req, res) => {
  res.render('home', {
    title: 'Search Hacker News',
  });
});

----------------------------------------------------
mkdir -p public/css public/images

nano public/css/style.css

----------------------------------------------------
wget https://i.imgur.com/qUbNHtf.png -O public/images/hn.png

----------------------------------------------------
const express = require('express');
const path = require('path');

const app = express();

app.use(express.static(path.join(__dirname, 'public')));

----------------------------------------------------
http://localhost:3000/images/hn.png
http://localhost:3000/css/style.css

----------------------------------------------------
app.get('/search', (req, res) => {
  const searchQuery = req.query.q;
  if (!searchQuery) {
    res.redirect(302, '/');
    return;
  }

  console.log(searchQuery);
  res.status(200).end();
});

----------------------------------------------------
npm install axios
const axios = require('axios');

----------------------------------------------------
async function searchHN(query) {
  const response = await axios.get(
    `https://hn.algolia.com/api/v1/search?query=${query}&tags=story&hitsPerPage=90`
  );

  return response.data;
}

----------------------------------------------------
app.get('/search', async (req, res) => {
  const searchQuery = req.query.q;
  if (!searchQuery) {
    res.redirect(302, '/');
    return;
  }

  const results = await searchHN(searchQuery);
  res.status(200).json(results);
});

----------------------------------------------------
nano views/search.pug

----------------------------------------------------
extends default

block content
  header
    a.logo(href='/') Hacker News
    form(action='/search' method='GET')
      input.search-input(autofocus='' value=`${searchQuery || ''}` placeholder='Enter a search term' type='search' name='q')
    a.button.github-button(href='<https://github.com/finallyayo/hacker-news>') Source code

  .container
    if !searchResults || !searchResults.nbHits
      .result-count
        p No results found for your query:
        |
        strong #{searchQuery}
    else
      ul.search-results
        each story in searchResults.hits
          li.news-article
            a.title-link(target='_blank' rel='noreferrer noopener' href=`${story.url}`)
              h3.title #{story.title}
            .metadata #{story.points} points by
              |
              |
              span.author #{story.author}
              |
              | on
              |
              time.created-date #{story.created_at}
              |
              |
              a.comments(target='_blank' rel='noreferrer noopener' href=`https://news.ycombinator.com/item?id=${story.objectID}`) #{story.num_comments} comments


----------------------------------------------------
app.get('/search', async (req, res) => {
  const searchQuery = req.query.q;
  if (!searchQuery) {
    res.redirect(302, '/');
    return;
  }

  const results = await searchHN(searchQuery);
  res.render('search', {
    title: `Search results for: ${searchQuery}`,
    searchResults: results,
    searchQuery,
  });
});

----------------------------------------------------
npm install date-fns
app.locals.dateFns = require('date-fns');
time.created-date #{story.created_at}

----------------------------------------------------
time.created-date #{dateFns.format(new Date(`${story.created_at}`), 'LLL dd, yyyy')}

----------------------------------------------------
  -- Handling Errors --

app.use(function (err, req, res, next) {
  console.error(err);
  res.set('Content-Type', 'text/html');
  res.status(500).send('<h1>Internal Server Error</h1>');
});

----------------------------------------------------
app.get('/search', async (req, res, next) => {
  try {
    const searchQuery = req.query.q;
    if (!searchQuery) {
      res.redirect(302, '/');
      return;
    }

    const results = await searchHN(searchQuery);
    res.render('search', {
      title: `Search results for: ${searchQuery}`,
      searchResults: results,
      searchQuery,
    });
  } catch (err) {
    next(err);
  }
});

----------------------------------------------------
-- Deploy Application To Production --

npm start

http://localhost:3000 OR http://<your_server_id:3000

----------------------------------------------------

-- Layout --

// layout.pug
html
  head
    title My Site
  body
		header
			a(href='/') Home

		block content

		footer
			p Site Footer
----------------------------------------------------
Adding content to blocks

// hello.pug
extends layout.pug

block content
	h1 Hello, world!
----------------------------------------------------
<!-- output -->
<html>
	<head>
		<title>My Site</title>
	</head>
	<body>
		<header>
			<a href="/">Home</a>
		</header>

		<h1>Hello, world!</h1>

		<footer>
			<p>Site Footer</p>
		</footer>
	</body>
</html>
----------------------------------------------------
// second.pug
extends layout.pug

block content
	h1 This is the second page!
----------------------------------------------------
<!-- output -->
<html>
	<head>
		<title>My Site</title>
	</head>
	<body>
		<header>
			<a href="/">Home</a>
		</header>

		<h1>This is the second page!</h1>

		<footer>
			<p>Site Footer</p>
		</footer>
	</body>
</html>
----------------------------------------------------
// layout.pug
html
  head
    title My Site
  body
		header
			a(href='/') Home

		block content

		footer
			p Site Footer

		block scripts


----------------------------------------------------
// hello.pug
extends layout.pug

block content
	h1 Hello, world!

block scripts
	script console.log('Hello, world!')
----------------------------------------------------
----------------------------------------------------

-- My Mongodb Crud --
-- my mongodb crud --

Model, View, Controlelrs, Routes, Mongodb, Schema, Connection

Dir and File Structure:

Project Dir:
  models (dir)      / userMode.js (file)
  views (dir)       / userForm.pug (file)
  controlers (dir)  / userController.js (file)
  routes (dir)      / userRooutes.js (file)
  app.js (file)


Mongodb Connection:

//app.js

const express = require('express')
const mongoose = require('mongoose')
const dotenv = require('dotenv')
const bodyParser = require('body-parser')
//const morgan = require('morgan')
const path=require('path')
const app = express()

const userRouter = require('./routes/userRoutes.js')  //User Router
//const userController = require('./controllers/userController.js')   //User Controller

//const url='mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.1'
const url='mongodb://localhost:27017/mydb'
mongoose.connect(url, {useNewUrlParser:true})
const con = mongoose.connection
con.on('open', () => {
	console.log('connected...')
})

dotenv.config({path:'config.env'})
const PORT=process.env.PORT || 8080

//Parse request to body-parser
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({extended:true}))
  //midlewares
//app.use(express.json());

//Set view engine
app.set('view engine','pug');
app.set('views',path.resolve(__dirname, "views"));
//app.set('views',"./views");       //or

app.use('/', userRouter)

app.listen(PORT, () => {
	console.log('server started Port: ' + PORT)
})


//Model:

const mongoose = require('mongoose')
const userSchema = new mongoose.Schema({
    name:{
        type:String,
        require:true
    },
    email:{
        type:String,
        requiere:true
    },
    mobile:{
        type:Number,
        require:true
    },
    password:{
        type:String,
        require:true
    }
})

const User = mongoose.model('User', userSchema)
module.exports = User


//Controller: 

const res = require('express/lib/response')
const User = require('../models/userModel.js')

const insertUser = async (req,res) => {

    try {
        const user = new User({
            name: req.body.name,
            email: req.body.email,
            mobile: req.body.mobile,
            password: req.body.password,
        })

        const result = await user.save()
        res.send("Register has been successfull. "+result)
        
    } catch (error) {
        res.send(error.message)
    }
}

module.exports = { insertUser }


//Routes:

const express = require('express')
const router = express.Router()

const { insertUser } = require('../controllers/userController.js') 
//onst user = require('../controllers/userController.js')    //OR

 router.get('/', (req, res) => {   
    res.render('index', {title: "Ecommerce"});
 });
 
 router.get('/about', (req, res) => {   
   res.render('about', {title: "Ecommerce about"});
 });

 router.get('/home', (req, res) => {   
   res.render('home', {title: "Ecommerce home"});
 });

 router.get('/register', (req, res) => {   
   res.render('register', {title: "Ecommerce register"});
 });
  
 router.post('/register', insertUser);
 //router.post('/register', user.insertUser);   //OR
 
 module.exports = router


//View: 

register.pug

extends layout.pug

block content
      h1#main.main Products
      form(method='post')
       input.home-input(type='text' name='name' value="" placeholder='Name')
       input.home-input(type='text' name='email' value="" placeholder='Email')
       input.home-input(type='text' name='mobile' value="" placeholder='Mobile')
       input.home-input(type='text' name='password' value="" placeholder='password')
       input.btn-input(type='submit' name='submit' value='Send')

      block foot
       #footer
        p some footer content




  layout.pug
  
  doctype html
html
    head
      meta(charset='UTF-8')
      meta(name='viewport' content='width=device-width, initial-scale=1.0')
      meta(http-equiv='X-UA-Compatible' content='ie=edge')
      title #{title}
      link(rel='stylesheet' type="text/css" href='/css/style.css')
      script(src='/javascripts/jquery.js')
      script(src='/javascripts/app.js')
    body
    block content

----------------------------------------------------
----------------------------------------------------

--> PUG Template <--
    pug template


Loop in pug template : 

//userRouter.js
router.get('/listing', (req, res) => {   
  let data = [1,2,3,4]
 res.render('listing', {title: "Ecommerce listing", data:data});
});

//views/listing.pug
  ul 
  - var i=0
  each i in data
    li = #{i}


    ul 
    - var count=0
    each count in data
      li = #{i}


      <br>
      section= s
        - for (var i=0; i<3; i++)
            div= data[i]     
----------------------------------------------------
----------------------------------------------------
Flash Message:

<ul>
  {% for msg in getFlashMessages('success') %}
  <li>{{msg}}</li>
  {% endfor %}
</ul>

----------------------------------------------------

Git Commands:

I'm guessing this folder has been checked into git before?

Run git rm -r --cached <folderName> and check again.
//Remove folder after run add . command

----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------